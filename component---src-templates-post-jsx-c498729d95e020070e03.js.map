{"version":3,"sources":["webpack:///./src/layouts/PostLayout.jsx","webpack:///./src/templates/post.jsx"],"names":["PostLayout","children","postImage","theme","styles","css","colors","link","linkHover","fontFamily","heading","headroom","SuggestionBar","props","white","light","shadow","suggestion","PostSuggestion","query","Post","data","pageContext","next","prev","markdownRemark","html","frontmatter","excerpt","date","title","tags","path","description","image","cover","childImageSharp","fluid","banner","pathname","article","input","list","to"],"mappings":"6MAqEeA,EA1DI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAb,OACjB,YAAC,IAAD,CAAeC,MAAOA,KACpB,YAAC,WAAD,KACE,YAAC,IAAD,CACEC,OAAQC,YAAF,+UAwBgBH,EAxBhB,kEA+BOC,IAAMG,OAAOC,KA/BpB,mFAqCOJ,IAAMG,OAAOE,UArCpB,oBAwCaL,IAAMM,WAAWC,QAxC9B,KA2CFC,OAGN,YAAC,IAAD,MACA,YAAC,IAAD,MACCV,EACD,YAAC,IAAD,S,oCCvDN,IAAMW,EAAa,kHAIH,SAAAC,GAAK,OAAIA,EAAMV,MAAMG,OAAOQ,MAAMC,OAJ/B,eAKH,SAAAF,GAAK,OAAIA,EAAMV,MAAMa,OAAOC,YALzB,KAObC,EAAc,4HA0DPC,GAVEC,UA1CF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACZC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KADwB,EAEAH,EAAKI,eAApCC,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,YAAaC,EAFY,EAEZA,QACnBC,EAAwCF,EAAxCE,KAAMC,EAAkCH,EAAlCG,MAAOC,EAA2BJ,EAA3BI,KAAMC,EAAqBL,EAArBK,KAAMC,EAAeN,EAAfM,YAC1BC,EAAQP,EAAYQ,MAAMC,gBAAgBC,MAEhD,OACE,YAAC,EAAD,CAAYnC,UAAWgC,GACrB,YAAC,IAAD,CACEJ,MAAOA,EACPG,YAAaA,GAAeL,GAAW,IACvCU,OAAQJ,EACRK,SAAUP,EACVQ,SAAO,IAET,YAAC,IAAD,CAAQV,MAAOA,EAAOD,KAAMA,EAAMM,MAAOD,IACzC,YAAC,IAAD,KACE,YAAC,IAAD,CAASO,MAAOf,IAChB,YAAC,IAAD,CAAWgB,KAAMX,GAAQ,MAE3B,YAACnB,EAAD,KACE,YAACM,EAAD,KACGM,GACC,YAAC,OAAD,CAAMmB,GAAInB,EAAKG,YAAYK,MAA3B,WAEE,sBAAKR,EAAKG,YAAYG,SAI5B,YAACZ,EAAD,KACGK,GACC,YAAC,OAAD,CAAMoB,GAAIpB,EAAKI,YAAYK,MAA3B,OAEE,sBAAKT,EAAKI,YAAYG,YAmBlB","file":"component---src-templates-post-jsx-c498729d95e020070e03.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport { css, Global } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport 'typeface-open-sans';\nimport 'typeface-candal';\nimport { SEO } from 'components';\nimport { NavBar, Footer } from 'layouts';\nimport theme from '../../config/theme';\nimport headroom from '../styles/headroom';\n\nconst PostLayout = ({ children, postImage }) => (\n  <ThemeProvider theme={theme}>\n    <Fragment>\n      <Global\n        styles={css`\n          *,\n          *:before,\n          *:after {\n            box-sizing: inherit;\n          }\n          html {\n            text-rendering: optimizeLegibility;\n            overflow-x: hidden;\n            box-sizing: border-box;\n            -ms-overflow-style: scrollbar;\n            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n          }\n          html,\n          body {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            \n          }\n          body {\n            background: url(${postImage});\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            \n          }\n          a {\n            color: ${theme.colors.link};\n            transition: color 0.5s;\n            text-decoration: none;\n          }\n          a:hover {\n            text-decoration: none;\n            color: ${theme.colors.linkHover};\n          }\n          h1 {\n            font-family: ${theme.fontFamily.heading};\n          }\n\n          ${headroom}\n        `}\n      />\n      <SEO />\n      <NavBar />\n      {children}\n      <Footer />\n    </Fragment>\n  </ThemeProvider>\n);\n\nexport default PostLayout;\n\nPostLayout.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.node]).isRequired,\n  postImage: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport {  Container, Content } from 'layouts';\nimport { TagsBlock, Header, SEO } from 'components';\nimport '../styles/prism';\nimport PostLayout from '../layouts/PostLayout'\n\nconst SuggestionBar = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  background: ${props => props.theme.colors.white.light};\n  box-shadow: ${props => props.theme.shadow.suggestion};\n`;\nconst PostSuggestion = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 1rem 3rem 0 3rem;\n`;\n\nconst Post = ({ data, pageContext }) => {\n  const { next, prev } = pageContext;\n  const {html, frontmatter, excerpt } = data.markdownRemark\n  const {date, title, tags, path, description} = frontmatter\n  const image = frontmatter.cover.childImageSharp.fluid;\n\n  return (\n    <PostLayout postImage={image}>\n      <SEO\n        title={title}\n        description={description || excerpt || ' '}\n        banner={image}\n        pathname={path}\n        article\n      />\n      <Header title={title} date={date} cover={image} />\n      <Container >\n        <Content input={html} />\n        <TagsBlock list={tags || []} />\n      </Container>\n      <SuggestionBar>\n        <PostSuggestion>\n          {prev && (\n            <Link to={prev.frontmatter.path}>\n              Previous\n              <h3>{prev.frontmatter.title}</h3>\n            </Link>\n          )}\n        </PostSuggestion>\n        <PostSuggestion>\n          {next && (\n            <Link to={next.frontmatter.path}>\n              Next\n              <h3>{next.frontmatter.title}</h3>\n            </Link>\n          )}\n        </PostSuggestion>\n      </SuggestionBar>\n    </PostLayout>\n  );\n};\n\nexport default Post;\n\nPost.propTypes = {\n  pageContext: PropTypes.shape({\n    prev: PropTypes.object,\n    next: PropTypes.object,\n  }).isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport const query = graphql`\n  query($pathSlug: String!) {\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\n      html\n      frontmatter {\n        date\n        title\n        tags\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 1920\n              quality: 90\n              duotone: { highlight: \"#386eee\", shadow: \"#2323be\", opacity: 60 }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n            resize(width: 1200, quality: 90) {\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}